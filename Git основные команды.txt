git config --global user.name geekbrains - создание имени юзера
git config --global user.email info@geekbrains.ru - создание рабочей почты юзера
git config --global color.ui auto - подсветка текста Гит
________________________________
list (ls) - список содержимого
ls -a - показ скрытых файлов (расширенный показ)
change directory (cd) - смена рабочей директории (~ - тильда, обозначает домашнюю стандартную директорию)
cd .. - возврат рабочей директории на уровень назад (../.. - два уровня назад)
make directory (mkdir) - создание директории
touch - создание файла
copy (cp) - копирование файла
move (mv) - переименовать/переместить файл
echo "" - вывод строки в "" в терминал
echo "" > test.txt - вывод строки в "" в файл text.txt
cat - посмотреть содержимое файла
remove (rm) - удалить файл
rm -R - рекурсивное удаление директории (удалить директорию и все содержимое)
git init - создание пустого репозитория в текущем местоположении путем добавления своей собственной системной папки
git status - текущее состояние репозитория
git remote add origin (ссылка на репозиторий) - добавление связи между локальным файлом и сервисом GitHub
git remote -v - отображение списка подключенных remote-соединений
git add (файл) - добавить файл в индекс (к будущему коммиту)
git add . - добавляет все изменения в индекс (к будущему коммиту)
git commit - создать коммит (i - открывает окно для записи об изменениях)
git commit -m 'commit message' - записать коммит с сообщением
при выходе из коммита :wq (w - запись, q - выход)
.gitkeep - сохраняет пустые директории в общем репозитории
.gitignore - игнорирует некоторые файлы от попадания в общий индекс репозитория
git log - доступ к истории коммитов
git log --oneline - вывод лога в компактном виде (на одной ветке)
git log --oneline --all - вывод лога для всех веток
git reset (коммит) - сброс истории к определенному коммиту
git reset --hard - сброс истории к последнему коммиту
git reflog - доступ к подробной истории действий
git revert - новый коммит для отмены действия предыдущего коммита
git restore - сброс состояния файла на указанное

Работа с ветками репозитория
________________________
git branch - посмотреть доступные ветки в репозитории
git branch (ветка) - создать новую ветку
git branch -d (ветка) - удалить ветку
git checkout (ветка) - переключиться на ветку
git branch (ветка ветка) - две параллельные равнозначные ветки
git checkout -b (ветка) - переключиться на ветку (если таковой нет, создать ее автоматически и переключиться)
git checkout -b (ветка1) (ветка2) - создать и переключиться на ветку1 от ветки2 

Публикация репозитория
________________________
ssh-keygen - генерирует ключ для ssh-подключения для синхронизации локального компьютера с репозиторием
далее заходим в настройки пользователя на gitHub (SSH-keys) и вставляем в key информацию, которую получим при вызове команды cat (адрес сгенерированного ключа) в терминале
далее в списке репозиториев выбираем нужный, жмем code > use ssh, копируем маршрут в терминал с командой git clone для клонирования репозитория (git clone (маршрут) папка, в которую будет склонирован репозиторий)
git push - команда, которая загружает обратно все локальные изменения на удаленный репозиторий
git push --force - принудительная перезапись удаленной ветки на текущую
git push -u origin dev - краткая команда (загрузить с текущей ветки dev на ветку origin dev)
git pull - загрузить изменения ветки из удаленного репозитория
git fetch - подгрузить обновления из репозитория

Слияние веток
________________________
git merge (ветка) - слияние изменений указываемой ветки с веткой, в которой мы находимся
git push --delete origin (ветка) - удалить ветку с удаленного репозитория
git rebase (ветка) - сместить текущую ветку на послений коммит с ветки (ветка)

Управление версиями
________________________
git tag (версия тэга) - записать версию (тэг)
git tag - список тэгов
git tag -d (версия тэга) - удалить указанный тэг
git push --tags - загрузить тэги на удаленный репозиторий
git push --delete origin (версия тэга) - удалить тэг с удаленного репозитория

Pull-request
________________________
опубликовать изменения определенной ветки в общий доступ (осуществляется через GitHub командой pull&request)

Сложные операции
________________________
git stash - временное хранилище (для временного сохранения изменений при переходе на другую ветку без добавления в коммит)
git stash - список стэшей (временных хранилищ)
git stash push (файл) - добавить файл к уже существующему стэшу на текущей ветке
git stash pop (стэш) - применить изменения из стэша с его удалением
git merge (ветка) --squash - перенос изменений через squash
git rebase -i HEAD~X - склеить X коммитов
git cherry-pick (коммит) - перенести коммит на текущую ветку
git cherry-pick (ветка) - перенести последний коммит указываемой ветки на текущую ветку
git cherry-pick ..(ветка) - перенести все коммиты указываемой ветки на текущую ветку
git commit --amend - перезаписать предыдущий коммит
vi (файл) - открывает текстовый редактор для редактирования указываемого файла